// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `btn_minus_normal`.
    static let btn_minus_normal = ImageResource(bundle: _R.hostingBundle, name: "btn_minus_normal")
    /// Image `btn_plus_normal`.
    static let btn_plus_normal = ImageResource(bundle: _R.hostingBundle, name: "btn_plus_normal")
    /// Image `ic_right`.
    static let ic_right = ImageResource(bundle: _R.hostingBundle, name: "ic_right")
    /// Image `ic_select`.
    static let ic_select = ImageResource(bundle: _R.hostingBundle, name: "ic_select")
    /// Image `ic_selected`.
    static let ic_selected = ImageResource(bundle: _R.hostingBundle, name: "ic_selected")
    /// Image `purchase_icon_alipay`.
    static let purchase_icon_alipay = ImageResource(bundle: _R.hostingBundle, name: "purchase_icon_alipay")
    /// Image `purchase_icon_unionpay`.
    static let purchase_icon_unionpay = ImageResource(bundle: _R.hostingBundle, name: "purchase_icon_unionpay")
    /// Image `purchase_icon_wechat`.
    static let purchase_icon_wechat = ImageResource(bundle: _R.hostingBundle, name: "purchase_icon_wechat")
    
    /// `UIImage(named: "btn_minus_normal", bundle: ..., traitCollection: ...)`
    static func btn_minus_normal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_minus_normal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_plus_normal", bundle: ..., traitCollection: ...)`
    static func btn_plus_normal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_plus_normal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_right", bundle: ..., traitCollection: ...)`
    static func ic_right(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_right, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_select", bundle: ..., traitCollection: ...)`
    static func ic_select(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_select, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_selected", bundle: ..., traitCollection: ...)`
    static func ic_selected(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_selected, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "purchase_icon_alipay", bundle: ..., traitCollection: ...)`
    static func purchase_icon_alipay(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.purchase_icon_alipay, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "purchase_icon_unionpay", bundle: ..., traitCollection: ...)`
    static func purchase_icon_unionpay(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.purchase_icon_unionpay, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "purchase_icon_wechat", bundle: ..., traitCollection: ...)`
    static func purchase_icon_wechat(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.purchase_icon_wechat, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PaymentTableViewCell`.
    static let paymentTableViewCell: ReuseIdentifier<PaymentTableViewCell> = ReuseIdentifier(identifier: "PaymentTableViewCell")
    /// Reuse identifier `ProductTableViewCell`.
    static let productTableViewCell: ReuseIdentifier<ProductTableViewCell> = ReuseIdentifier(identifier: "ProductTableViewCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "gg.swift.t.RxDealCell") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let cartViewController = StoryboardViewControllerResource<CartViewController>(identifier: "CartViewController")
      let name = "Main"
      let selectPaymentViewController = StoryboardViewControllerResource<SelectPaymentViewController>(identifier: "SelectPaymentViewController")
      
      func cartViewController(_: Void) -> CartViewController? {
        return UIStoryboard(resource: self).instantiateViewController(cartViewController)
      }
      
      func selectPaymentViewController(_: Void) -> SelectPaymentViewController? {
        return UIStoryboard(resource: self).instantiateViewController(selectPaymentViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "purchase_icon_alipay") == nil { throw ValidationError(description: "[R.swift] Image named 'purchase_icon_alipay' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "ic_right") == nil { throw ValidationError(description: "[R.swift] Image named 'ic_right' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "btn_plus_normal") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_plus_normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "btn_minus_normal") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_minus_normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "ic_select") == nil { throw ValidationError(description: "[R.swift] Image named 'ic_select' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "ic_selected") == nil { throw ValidationError(description: "[R.swift] Image named 'ic_selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().cartViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'cartViewController' could not be loaded from storyboard 'Main' as 'CartViewController'.") }
        if _R.storyboard.main().selectPaymentViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'selectPaymentViewController' could not be loaded from storyboard 'Main' as 'SelectPaymentViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}